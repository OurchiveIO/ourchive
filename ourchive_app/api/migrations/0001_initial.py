# Generated by Django 4.2.1 on 2023-06-07 22:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('profile', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=600, null=True)),
                ('icon_alt_text', models.CharField(blank=True, max_length=600, null=True)),
                ('has_notifications', models.BooleanField(default=False)),
                ('default_content', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AttributeType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('display_name', models.CharField(max_length=200)),
                ('allow_on_work', models.BooleanField(default=False)),
                ('allow_on_bookmark', models.BooleanField(default=False)),
                ('allow_on_chapter', models.BooleanField(default=False)),
                ('allow_on_user', models.BooleanField(default=False)),
                ('allow_multiselect', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('display_name', models.CharField(max_length=200)),
                ('attribute_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='api.attributetype')),
            ],
            options={
                'ordering': ('attribute_type__name', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(blank=True, default='', max_length=200)),
                ('rating', models.IntegerField()),
                ('description', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('draft', models.BooleanField(default=False)),
                ('anon_comments_permitted', models.BooleanField(default=True)),
                ('comments_permitted', models.BooleanField(default=True)),
                ('comment_count', models.IntegerField(default=0)),
                ('is_private', models.BooleanField(default=False)),
                ('attributes', models.ManyToManyField(to='api.attributevalue')),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('number', models.IntegerField(default=1)),
                ('text', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('word_count', models.IntegerField(default=0)),
                ('audio_url', models.CharField(blank=True, max_length=600, null=True)),
                ('audio_description', models.CharField(blank=True, max_length=600, null=True)),
                ('audio_length', models.BigIntegerField(blank=True, default=0, null=True)),
                ('image_url', models.CharField(blank=True, max_length=600, null=True)),
                ('image_alt_text', models.CharField(blank=True, max_length=600, null=True)),
                ('image_format', models.CharField(blank=True, max_length=100, null=True)),
                ('image_size', models.CharField(blank=True, max_length=100, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('draft', models.BooleanField(default=True)),
                ('comment_count', models.IntegerField(default=0)),
                ('attributes', models.ManyToManyField(to='api.attributevalue')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('value', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('email', models.CharField(max_length=200)),
                ('invite_token', models.CharField(max_length=200)),
                ('token_expiration', models.DateTimeField()),
                ('token_used', models.BooleanField(default=False)),
                ('register_link', models.CharField(max_length=200)),
                ('send_invite', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('type_label', models.CharField(max_length=200)),
                ('send_email', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='OurchiveSetting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200)),
                ('value', models.CharField(max_length=200)),
                ('grouping', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('text', models.CharField(db_index=True, max_length=120)),
                ('display_text', models.CharField(default='', max_length=120)),
            ],
            options={
                'ordering': ('tag_type__label',),
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('summary', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('process_status', models.IntegerField(null=True)),
                ('cover_url', models.CharField(blank=True, max_length=600, null=True)),
                ('cover_alt_text', models.CharField(blank=True, max_length=600, null=True)),
                ('epub_id', models.CharField(blank=True, max_length=600, null=True)),
                ('zip_id', models.CharField(blank=True, max_length=600, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('anon_comments_permitted', models.BooleanField(default=True)),
                ('comments_permitted', models.BooleanField(default=True)),
                ('word_count', models.IntegerField(default=0)),
                ('audio_length', models.IntegerField(default=0)),
                ('fingerguns', models.IntegerField(default=0)),
                ('draft', models.BooleanField(default=True)),
                ('comment_count', models.IntegerField(default=0)),
                ('attributes', models.ManyToManyField(to='api.attributevalue')),
                ('tags', models.ManyToManyField(to='api.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('type_name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='WorkAttribute',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('attribute_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.attributevalue')),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.work')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='work',
            name='work_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.worktype'),
        ),
        migrations.CreateModel(
            name='UserBlocks',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(db_index=True, max_length=200)),
                ('admin_administrated', models.BooleanField(default=False)),
                ('required', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('label',),
                'indexes': [models.Index(fields=['label'], name='api_tagtype_label_bb5e2f_idx')],
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='tag_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.tagtype'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(default='', max_length=200)),
                ('content', models.TextField(blank=True, default='')),
                ('read', models.BooleanField(default=False)),
                ('notification_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.notificationtype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('read',),
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('read', models.BooleanField(default=False)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages_sent', to=settings.AUTH_USER_MODEL)),
                ('replies', models.ManyToManyField(to='api.message')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages_recieved', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Fingergun',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.work')),
            ],
        ),
        migrations.CreateModel(
            name='ChapterComment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('text', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('chapter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.chapter')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.chaptercomment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChapterAttribute',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('attribute_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.attributevalue')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.chapter')),
            ],
            options={
                'ordering': ['attribute_value'],
            },
        ),
        migrations.AddField(
            model_name='chapter',
            name='work',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='api.work'),
        ),
        migrations.CreateModel(
            name='BookmarkLink',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('link', models.CharField(max_length=200)),
                ('text', models.CharField(max_length=200)),
                ('bookmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.bookmark')),
            ],
        ),
        migrations.CreateModel(
            name='BookmarkComment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('text', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('bookmark', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.bookmark')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.bookmarkcomment')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookmarkCollection',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('is_complete', models.BooleanField(default=False)),
                ('cover_url', models.CharField(blank=True, max_length=600, null=True)),
                ('cover_alt_text', models.CharField(blank=True, max_length=600, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('anon_comments_permitted', models.BooleanField(default=True)),
                ('comments_permitted', models.BooleanField(default=True)),
                ('is_private', models.BooleanField(default=False)),
                ('tags', models.ManyToManyField(to='api.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BookmarkAttribute',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('attribute_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.attributevalue')),
                ('bookmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.bookmark')),
            ],
        ),
        migrations.AddField(
            model_name='bookmark',
            name='collection',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.bookmarkcollection'),
        ),
        migrations.AddField(
            model_name='bookmark',
            name='tags',
            field=models.ManyToManyField(to='api.tag'),
        ),
        migrations.AddField(
            model_name='bookmark',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bookmark',
            name='work',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.work'),
        ),
        migrations.AddIndex(
            model_name='attributetype',
            index=models.Index(fields=['name'], name='api_attribu_name_8fc968_idx'),
        ),
        migrations.AddConstraint(
            model_name='attributetype',
            constraint=models.UniqueConstraint(models.OrderBy(django.db.models.functions.text.Lower('name'), descending=True), name='unique_attributetype_name'),
        ),
        migrations.AddField(
            model_name='user',
            name='attributes',
            field=models.ManyToManyField(to='api.attributevalue'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['text'], name='api_tag_text_e39765_idx'),
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(models.OrderBy(django.db.models.functions.text.Lower('text'), descending=True), models.F('tag_type_id'), name='unique_text_and_type'),
        ),
        migrations.AddIndex(
            model_name='attributevalue',
            index=models.Index(fields=['name'], name='api_attribu_name_0a819d_idx'),
        ),
        migrations.AddConstraint(
            model_name='attributevalue',
            constraint=models.UniqueConstraint(models.OrderBy(django.db.models.functions.text.Lower('name'), descending=True), name='unique_attributevalue_name'),
        ),
    ]
